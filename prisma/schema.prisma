// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model temp_users {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  first_name          String
  last_name           String
  role                String
  date_of_birth       DateTime?
  gender              String?
  phone               String?
  house_number        String?
  street              String?
  city                String?
  pincode             String?
  verification_token  String?
  expires_at          DateTime  @default(dbgenerated("NOW() + INTERVAL '24 hours'"))
  created_at          DateTime  @default(now())
  verified            Boolean   @default(false)

  temp_teachers       temp_teachers[]
}

model temp_teachers {
  id                              Int       @id @default(autoincrement())
  temp_user_id                    Int
  qualification                   String?
  experience_years                Int?
  subjects_taught                 String[]
  teaching_mode                   String?
  hourly_rate                     Float?
  monthly_salary                  Float     @default(0)
  bank_account_number             String?
  bank_ifsc_code                  String?
  bank_name                       String?
  account_holder_name             String?
  pan_number                      String?
  aadhar_url                      String?
  aadhar_url_public_id            String?
  resume_url                      String?
  resume_url_public_id            String?
  certificates_url                String[]
  certificates_url_public_ids     String[]
  tenth_percentage                Float?
  twelfth_percentage              Float?
  marksheet_url_tenth             String?
  marksheet_url_tenth_public_id   String?
  marksheet_url_twelfth           String?
  marksheet_url_twelfth_public_id String?
  availability_schedule           Json?
  max_students                    Int       @default(20)
  created_at                      DateTime  @default(now())
  updated_at                      DateTime  @default(now())

  temp_user                       temp_users @relation(fields: [temp_user_id], references: [id], onDelete: Cascade)
}

model users {
  id                        Int       @id @default(autoincrement())
  email                     String    @unique
  password_hash             String?
  role                      String
  first_name                String?
  last_name                 String?
  phone                     String?
  house_number              String?
  street                    String?
  city                      String?
  pincode                   String?
  date_of_birth             DateTime?
  location                  String?
  home_latitude             Float?
  home_longitude            Float?
  is_verified               Boolean   @default(false)
  verification_token        String?
  verification_token_expires DateTime?
  reset_token               String?
  reset_token_expires       DateTime?
  access_token              String?
  profile_image_url         String?
  profile_image_url_public_id String?
  is_active                 Boolean   @default(true)
  is_deleted                Boolean   @default(false)
  created_at                DateTime  @default(now())
  updated_at                DateTime  @default(now())
  deleted_at                DateTime?

  students                  students[]
  teachers                  teachers[]
  teacher_student_assignments teacher_student_assignments[] // As assigned_by
  attendance                attendance[] // As marked_by
  payments                  payments[] // As processed_by
  salary_payments           salary_payments[] // As processed_by
  system_settings           system_settings[] // As updated_by
  audit_logs                audit_logs[] // As user_id
  teachers_approved_by      teachers[] @relation("teachers_approved_by")
}

model students {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  grade                 String?
  school_name           String?
  parent_name           String?
  parent_phone          String?
  parent_email          String?
  emergency_contact     String?
  subjects_interested   String[]
  preferred_schedule    String?
  monthly_fee           Float     @default(0)
  fee_due_date          DateTime?
  aadhar_url            String?
  aadhar_url_public_id  String?
  grace_period_end      DateTime?
  enrollment_date       DateTime  @default(dbgenerated("CURRENT_DATE"))
  is_active             Boolean   @default(true)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())

  user                  users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  student_fees          student_fees[]
  teacher_student_assignments teacher_student_assignments[]
  assignments           assignments[]
  assignment_submissions assignment_submissions[]
  attendance            attendance[]
  payments              payments[]
}

model student_fees {
  id         Int       @id @default(autoincrement())
  student_id Int
  month      Int
  year       Int
  amount     Float
  due_date   DateTime
  status     String    @default("due")
  reminder_sent Int    @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  student    students  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, month, year])
}

model teachers {
  id                              Int       @id @default(autoincrement())
  user_id                         Int
  qualification                   String?
  experience_years                Int?
  subjects_taught                 String[]
  teaching_mode                   String?
  monthly_salary                  Float     @default(0)
  salary_pay_day                  Int       @default(1)
  bank_account_number             String?
  bank_ifsc_code                  String?
  bank_name                       String?
  account_holder_name             String?
  aadhar_url                      String?
  aadhar_url_public_id            String?
  resume_url                      String?
  resume_url_public_id            String?
  certificates_url                String[]
  certificates_url_public_id      String?
  tenth_percentage                Float?
  twelfth_percentage              Float?
  marksheet_url_tenth             String?
  marksheet_url_tenth_public_id   String?
  marksheet_url_twelfth           String?
  marksheet_url_twelfth_public_id String?
  approval_status                 String    @default("pending")
  approved_by                     Int?
  approved_at                     DateTime?
  rejection_reason                String?
  availability_schedule           Json?
  max_students                    Int       @default(20)
  current_students                Int       @default(0)
  rating                          Float     @default(0)
  total_reviews                   Int       @default(0)
  is_active                       Boolean   @default(true)
  created_at                      DateTime  @default(now())
  updated_at                      DateTime  @default(now())

  user                            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  approved_by_user                users?    @relation("teachers_approved_by", fields: [approved_by], references: [id])
  teacher_student_assignments     teacher_student_assignments[]
  assignments                     assignments[]
  assignment_submissions          assignment_submissions[] // As graded_by
  attendance                      attendance[]
  salary_payments                 salary_payments[]
}

model teacher_student_assignments {
  id          Int       @id @default(autoincrement())
  teacher_id  Int
  student_id  Int
  subject     String
  assigned_date DateTime @default(dbgenerated("CURRENT_DATE"))
  assigned_by Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  teacher     teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  student     students  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  assigned_by_user users? @relation(fields: [assigned_by], references: [id])

  @@unique([teacher_id, student_id, subject])
}

model assignments {
  id              Int       @id @default(autoincrement())
  teacher_id      Int
  student_id      Int
  title           String
  description     String?
  subject         String?
  due_date        DateTime?
  assignment_type String?
  max_marks       Int       @default(100)
  instructions    String?
  grade           String?
  status          String    @default("assigned")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())

  teacher         teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  student         students  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  assignment_attachments assignment_attachments[]
  assignment_submissions assignment_submissions[]
}

model assignment_attachments {
  id                Int       @id @default(autoincrement())
  assignment_id     Int
  file_name         String?
  file_url          String?
  file_url_publicId String?
  mime_type         String?
  size              Int?
  is_submission     Boolean   @default(false)
  created_at        DateTime  @default(now())

  assignment        assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
}

model assignment_submissions {
  id             Int       @id @default(autoincrement())
  assignment_id  Int
  student_id     Int
  submission_text String?
  submitted_at   DateTime  @default(now())
  marks_obtained Int?
  grade          String?
  feedback       String?
  graded_at      DateTime?
  graded_by      Int?
  is_late        Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  assignment     assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  student        students    @relation(fields: [student_id], references: [id], onDelete: Cascade)
  graded_by_teacher teachers? @relation(fields: [graded_by], references: [id])
}

model attendance {
  id              Int       @id @default(autoincrement())
  student_id      Int
  teacher_id      Int
  date            DateTime
  status          String    @default("present")
  notes           String?
  marked_by       Int?
  marked_at       DateTime  @default(now())
  session_duration Int?
  subject         String?
  latitude        Float?
  longitude       Float?
  created_at      DateTime  @default(now())

  student         students  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  teacher         teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  marked_by_user  users?    @relation(fields: [marked_by], references: [id])

  @@unique([student_id, teacher_id, date, subject])
}

model payments {
  id             Int       @id @default(autoincrement())
  student_id     Int
  amount         Float
  payment_type   String    @default("monthly_fee")
  payment_method String?
  payment_status String    @default("pending")
  transaction_id String?
  payment_date   DateTime?
  due_date       DateTime?
  late_fee       Float     @default(0)
  discount       Float     @default(0)
  notes          String?
  processed_by   Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  student        students  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  processed_by_user users? @relation(fields: [processed_by], references: [id])
}

model salary_payments {
  id             Int       @id @default(autoincrement())
  teacher_id     Int
  month          Int
  year           Int
  base_salary    Float
  bonus          Float     @default(0)
  deductions     Float     @default(0)
  total_amount   Float
  payment_status String    @default("pending")
  payment_date   DateTime?
  payment_method String?
  transaction_id String?
  notes          String?
  processed_by   Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  teacher        teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  processed_by_user users? @relation(fields: [processed_by], references: [id])

  @@unique([teacher_id, month, year])
}

model system_settings {
  id           Int       @id @default(autoincrement())
  setting_key  String    @unique
  setting_value String?
  setting_type String?
  description  String?
  is_public    Boolean   @default(false)
  updated_by   Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())

  updated_by_user users? @relation(fields: [updated_by], references: [id])
}

model audit_logs {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  action     String
  table_name String?
  record_id  Int?
  old_values Json?
  new_values Json?
  ip_address String?
  user_agent String?
  created_at DateTime  @default(now())

  user       users?    @relation(fields: [user_id], references: [id])
}

// @@index([email], on: users)
// @@index([role], on: users)
// @@index([is_active], on: users)
// @@index([created_at], on: users)
// @@index([user_id], on: students)
// @@index([user_id], on: teachers)
// @@index([approval_status], on: teachers)
// @@index([teacher_id, student_id], on: assignments)
// @@index([created_at], on: assignments)
// @@index([student_id, date], on: attendance)
// @@index([created_at], on: attendance)
// @@index([student_id], on: payments)
// @@index([created_at], on: payments)
// @@index([teacher_id, month, year], on: salary_payments)
// @@index([created_at], on: salary_payments)
// @@index([student_id, month, year], on: student_fees)
